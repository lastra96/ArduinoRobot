//ultrasonidos
const int Trigger = 5;   //Pin digital 2 para el Trigger del sensor
const int Echo = 6;   //Pin digital 3 para el echo del sensor

//I2c - Pantalla
//https://github.com/fdebrabander/Arduino-LiquidCrystal-I2C-library
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x3F,16,2);

//led
const int ledPIN = 3;

//motores
const int motord1 = 12;
const int motorv1 = 10;
const int motord2 = 13;
const int motorv2 = 11;

//interrupciones
const int intPin = 2;

//mando
#include <IRremote.h>
 

const int RECV_PIN = 9;
IRrecv irrecv(RECV_PIN);
decode_results results;

int com[30]; //array para guardar los movimientos
int mode = 1; // entero para indicar el modo en el que se encuentra el vehículo
int errormode = 0; // entero para indicar el modo en el que salto el error
String errortext = "Unknown error"; // motivo del error a mostrar cuando entre en el modo 4 o modo error
int obstaculos = 0; //contador de obstaculos para mostrar una vez terminado el circuito
int comlength=0; //longitud del array (no existe funcion length para un array




//-------------------------------------------------------------------------------------------



void setup() {
  Serial.begin(9600);//iniciailzamos la comunicación
  
  //ultrasonidos
  pinMode(Trigger, OUTPUT); //pin como salida
  pinMode(Echo, INPUT);  //pin como entrada
  digitalWrite(Trigger, LOW);//Inicializamos el pin con 0
    
  //LCD
  lcd.init();
  lcd.backlight();//Encender la luz de fondo.
   
  //led
  pinMode(ledPIN , OUTPUT);  //definir pin como salida

  //mando
  irrecv.enableIRIn();

  //motores
  pinMode(motord1, OUTPUT);
  pinMode(motorv1, OUTPUT);
  pinMode(motord2, OUTPUT);
  pinMode(motorv2, OUTPUT);

  
}




//-------------------------------------------------------------------------------------------

void loop() {

  
  enciendeLed(200);
  switch(mode){
    case 1:
      mensaje("Introduce ","comandos");
      enciendeLed(2000);
      if(recibeComandos()==true){
        mensaje("Recepcion OK", "Comenzando");
        delay(3000);
        mensaje("","");
        delay(1000);
        mode=2;
      }else{
        errormode=1;
        errortext="Err recepcion";
        mode=4;
      }
        
    break;
    case 2:
      mensaje("Ejecutando..","");
      for(int j = 0; j < comlength; j++){
        if(cercaObjeto()==false){
          if(ejecuta(com[j])==false){
            errormode=2;
            errortext="Err ejecucion";
            j=comlength;
            
          }
        }else{
          obstaculo();
        }
      }
	  if(errormode==2){
		mode=4;
	  }else{
		mode=3;
	  }
        
    break;
    case 3:
      mensaje("Fin lista","retomar?");
      if(retomar()){
        mode=1;
        mensaje("retomando...","");
        delay(1500);
      }


    break;
    case 4:
      switch(errormode){
        case 1:
          mensaje(errortext,"Reiniciando");
          delay(3000);
          mode=1;
        break;
        case 2:
          mensaje(errortext,"Reiniciando");
          delay(3000);
          mode=1;
        break;
        default:
          mensaje("ERROR","REINTENTANDO..."); 
          delay(3000);
          mode=1;
      }

    break;
    default:
      mode=1;
  }
}



//------------------------------------------------------------------------




boolean retomar(){
  if (irrecv.decode(&results)){
    if(results.value==0xFF02FD){
      return true;
    }else if(results.value!=NULL){
      mensaje("Retry","");
    }
  }
  return false;
}

void obstaculo(){
  mensaje("Obstaculo", "Girando...");
  enciendeLed(200);
  delay(200);
  enciendeLed(200);
  delay(200);
  enciendeLed(200);
  ejecuta(0);
  obstaculos++;
  String m = obstaculos + "obs encontrados";
  mensaje("Continuando",m);
}


void mensaje(String a, String b){
  lcd.setCursor(0,0);
  lcd.print(a);
  lcd.setCursor(0,1);// Cursor en la primera posición de la 2° fila
  lcd.print(b);
}

long distancia(){
  long t; //tiempo que demora en llegar el eco
  long d; //distancia en centimetros
  digitalWrite(Trigger, HIGH);
  delayMicroseconds(10);          //Enviamos un pulso de 10us
  digitalWrite(Trigger, LOW);
  t = pulseIn(Echo, HIGH); //obtenemos el ancho del pulso
  d = t/59; 
  return d;
}

boolean cercaObjeto(){
  if(distancia()<=30){
    delay(500);
    if(distancia()<=25){
      return true;
    }
  }
  return false;
}

void enciendeLed(long ms){
  digitalWrite(ledPIN , HIGH);   
  delay(ms);                   
  digitalWrite(ledPIN , LOW);
  delay(ms);        
}

boolean recibeComandos(){
  int flag=0;
  int mod=0;
  int i=0;
  while(flag==0)
  {
  irrecv.resume();
  //Serial.println("While recibeComandos");  
  switch(mod){
    case 0:
      Serial.println("Caso 0 recibeComandos");
      
      if (irrecv.decode(&results)){
        mod=1;
      }
    break;
    case 1:
      Serial.println("Caso 1 recibeComandos");
      if(results.value == 0xFF18E7) { //Arriba
        Serial.println("Arriba");
        com[i]=1;
        comlength++;
        i++;
        mod=0;
      }else if(results.value == 0xFF4AB5){ //Abajo
         Serial.println("Abajo");
         com[i]=2;
         comlength++;
         i++;
         mod=0;
      }else if(results.value == 0xFF5AA5){ //Derecha
         Serial.println("Derecha");
         com[i]=3;
         comlength++;
         i++;
         mod=0;
      }else if(results.value == 0xFF10EF){ //Izquierda
         Serial.println("Izquierda");
         com[i]=4;
         comlength++;
         i++;
         mod=0;
      }else if(results.value == 0xFF38C7){ // OK
        Serial.println("OK");
        flag=1;
      }else{
        return false;
        break;
      }
    break;
    default:
      mod=0;
  }
    
  }
  return true;
}

boolean ejecuta (int x){

  if(x==1){
      //adelante
      digitalWrite(motord1, HIGH);
      digitalWrite(motord2, LOW);
      digitalWrite(motorv1, 50);
      digitalWrite(motorv2, 50);
      delay(1000);
      digitalWrite(motorv1, 0);
      digitalWrite(motorv2, 0);
  }else if(x==2){
      //izquierda
      digitalWrite(motord1, HIGH);
      digitalWrite(motord2, LOW);
      digitalWrite(motorv1, 0);
      digitalWrite(motorv2, 50);
      delay(1000);
      digitalWrite(motorv1, 0);
      digitalWrite(motorv2, 0);

    }else if(x==3){
      //derecha
      digitalWrite(motord1, HIGH);
      digitalWrite(motord2, LOW);
      digitalWrite(motorv1, 50);
      digitalWrite(motorv2, 0);
      delay(1000);
      digitalWrite(motorv1, 0);
      digitalWrite(motorv2, 0);

    }else if(x==4){
      //atras
      digitalWrite(motord1, LOW);
      digitalWrite(motord2, HIGH);
      digitalWrite(motorv1, 50);
      digitalWrite(motorv2, 50);
      delay(1000);
      digitalWrite(motorv1, 0);
      digitalWrite(motorv2, 0);

    }else if(x==0){
      //media vuelta
      digitalWrite(motord1, LOW);
      digitalWrite(motord2, LOW);
      digitalWrite(motorv1, 50);
      digitalWrite(motorv2, 50);
      delay(1000);
      digitalWrite(motorv1, 0);
      digitalWrite(motorv2, 0);

    }else{
      //error
      return false;
  }
  
  return true;
}
